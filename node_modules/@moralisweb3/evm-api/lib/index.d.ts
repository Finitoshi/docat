import { ApiModule, ResponseAdapter, Core } from '@moralisweb3/common-core';
import { GetBlockRequest, GetBlockResponseAdapter, GetDateToBlockRequest, GetDateToBlockResponseAdapter, GetBlockStatsOperationRequest, GetBlockStatsOperationResponse, GetBlockStatsOperationResponseJSON, GetContractEventsRequest, GetContractEventsResponseAdapter, GetContractLogsRequest, GetContractLogsResponseAdapter, GetContractNFTsRequest, GetContractNFTsResponseAdapter, GetMultipleNFTsRequest, GetMultipleNFTsResponseAdapter, GetNFTContractMetadataRequest, GetNFTContractMetadataResponseAdapter, GetNFTContractTransfersRequest, GetNFTContractTransfersResponseAdapter, GetNFTLowestPriceRequest, GetNFTLowestPriceResponseAdapter, GetNFTMetadataRequest, GetNFTMetadataResponseAdapter, GetNFTOwnersRequest, GetNFTOwnersResponseAdapter, GetNFTTokenIdOwnersRequest, GetNFTTokenIdOwnersResponseAdapter, GetNFTTransfersByBlockRequest, GetNFTTransfersByBlockResponseAdapter, GetNFTTransfersFromToBlockRequest, GetNFTTransfersFromToBlockResponseAdapter, GetNFTTransfersRequest, GetNFTTransfersResponseAdapter, GetWalletNFTCollectionsRequest, GetWalletNFTCollectionsResponseAdapter, GetWalletNFTsRequest, GetWalletNFTsResponseAdapter, GetWalletNFTTransfersRequest, GetWalletNFTTransfersResponseAdapter, ReSyncMetadataRequest, ReSyncMetadataResponseAdapter, SyncNFTContractRequest, SyncNFTContractResponseAdapter, GetNFTTradesOperationRequest, GetNFTTradesOperationResponse, GetNFTTradesOperationResponseJSON, GetNFTCollectionStatsOperationRequest, GetNFTCollectionStatsOperationResponse, GetNFTCollectionStatsOperationResponseJSON, GetNFTTokenStatsOperationRequest, GetNFTTokenStatsOperationResponse, GetNFTTokenStatsOperationResponseJSON, GetInternalTransactionsRequest, GetInternalTransactionsResponseAdapter, GetTransactionRequest, GetTransactionResponseAdapter, GetTransactionVerboseRequest, GetTransactionVerboseResponseAdapter, GetWalletTransactionsRequest, GetWalletTransactionsResponseAdapter, GetWalletTransactionsVerboseRequest, GetWalletTransactionsVerboseResponseAdapter, GetNativeBalanceRequest, GetNativeBalanceResponseAdapter, GetNativeBalancesForAddressesRequest, GetNativeBalancesForAddressesResponseAdapter, GetPairAddressRequest, GetPairAddressResponseAdapter, GetPairReservesRequest, GetPairReservesResponseAdapter, GetPairPriceOperationRequest, GetPairPriceOperationResponse, GetPairPriceOperationResponseJSON, GetTokenAllowanceRequest, GetTokenAllowanceResponseAdapter, GetTokenMetadataBySymbolRequest, GetTokenMetadataBySymbolResponseAdapter, GetTokenMetadataRequest, GetTokenMetadataResponseAdapter, GetTokenPriceRequest, GetTokenPriceResponseAdapter, GetTokenTransfersRequest, GetTokenTransfersResponseAdapter, GetWalletTokenBalancesRequest, GetWalletTokenBalancesResponseAdapter, GetWalletTokenTransfersRequest, GetWalletTokenTransfersResponseAdapter, GetMultipleTokenPricesOperationRequest, GetMultipleTokenPricesOperationBody, GetMultipleTokenPricesOperationResponse, GetMultipleTokenPricesOperationResponseJSON, GetTokenStatsOperationRequest, GetTokenStatsOperationResponse, GetTokenStatsOperationResponseJSON, ResolveAddressRequest, ResolveAddressResponseAdapter, ResolveDomainRequest, ResolveDomainResponseAdapter, ResolveENSDomainRequest, ResolveENSDomainResponseAdapter, ResolveAddressToDomainOperationRequest, ResolveAddressToDomainOperationResponse, ResolveAddressToDomainOperationResponseJSON, RunContractFunctionRequest, RunContractFunctionResponseAdapter, Web3ApiVersionOperationResponse, Web3ApiVersionOperationResponseJSON, EndpointWeightsOperationResponse, EndpointWeightsOperationResponseJSON, ReviewContractsOperationRequest, ReviewContractsOperationBody, ReviewContractsOperationResponse, ReviewContractsOperationResponseJSON, UploadFolderRequest, UploadFolderResponseAdapter, GetWalletTokenBalancesPriceOperationRequest, GetWalletTokenBalancesPriceOperationResponse, GetWalletTokenBalancesPriceOperationResponseJSON, GetWalletNetWorthOperationRequest, GetWalletNetWorthOperationResponse, GetWalletNetWorthOperationResponseJSON, GetWalletActiveChainsOperationRequest, GetWalletActiveChainsOperationResponse, GetWalletActiveChainsOperationResponseJSON, GetWalletStatsOperationRequest, GetWalletStatsOperationResponse, GetWalletStatsOperationResponseJSON, GetTopERC20TokensByMarketCapOperationResponse, GetTopERC20TokensByMarketCapOperationResponseJSON, GetTopERC20TokensByPriceMoversOperationResponse, GetTopERC20TokensByPriceMoversOperationResponseJSON, GetTopNFTCollectionsByMarketCapOperationResponse, GetTopNFTCollectionsByMarketCapOperationResponseJSON, GetHottestNFTCollectionsByTradingVolumeOperationResponse, GetHottestNFTCollectionsByTradingVolumeOperationResponseJSON, GetTopCryptoCurrenciesByMarketCapOperationResponse, GetTopCryptoCurrenciesByMarketCapOperationResponseJSON, GetTopCryptoCurrenciesByTradingVolumeOperationResponse, GetTopCryptoCurrenciesByTradingVolumeOperationResponseJSON } from '@moralisweb3/common-evm-utils';
import { PaginatedResponseV3Adapter } from '@moralisweb3/api-utils';

declare abstract class ClientEvmApi extends ApiModule {
    readonly block: {
        getBlock: (request: GetBlockRequest) => Promise<GetBlockResponseAdapter | null>;
        getDateToBlock: (request: GetDateToBlockRequest) => Promise<GetDateToBlockResponseAdapter>;
        getBlockStats: (request: GetBlockStatsOperationRequest) => Promise<ResponseAdapter<GetBlockStatsOperationResponse, GetBlockStatsOperationResponseJSON>>;
    };
    readonly events: {
        getContractEvents: (request: GetContractEventsRequest) => Promise<GetContractEventsResponseAdapter>;
        getContractLogs: (request: GetContractLogsRequest) => Promise<GetContractLogsResponseAdapter>;
    };
    readonly nft: {
        getContractNFTs: (request: GetContractNFTsRequest) => Promise<GetContractNFTsResponseAdapter>;
        getMultipleNFTs: (request: GetMultipleNFTsRequest) => Promise<GetMultipleNFTsResponseAdapter>;
        getNFTContractMetadata: (request: GetNFTContractMetadataRequest) => Promise<GetNFTContractMetadataResponseAdapter | null>;
        getNFTContractTransfers: (request: GetNFTContractTransfersRequest) => Promise<GetNFTContractTransfersResponseAdapter>;
        getNFTLowestPrice: (request: GetNFTLowestPriceRequest) => Promise<GetNFTLowestPriceResponseAdapter | null>;
        getNFTMetadata: (request: GetNFTMetadataRequest) => Promise<GetNFTMetadataResponseAdapter | null>;
        getNFTOwners: (request: GetNFTOwnersRequest) => Promise<GetNFTOwnersResponseAdapter>;
        getNFTTokenIdOwners: (request: GetNFTTokenIdOwnersRequest) => Promise<GetNFTTokenIdOwnersResponseAdapter>;
        getNFTTransfersByBlock: (request: GetNFTTransfersByBlockRequest) => Promise<GetNFTTransfersByBlockResponseAdapter>;
        getNFTTransfersFromToBlock: (request: GetNFTTransfersFromToBlockRequest) => Promise<GetNFTTransfersFromToBlockResponseAdapter>;
        getNFTTransfers: (request: GetNFTTransfersRequest) => Promise<GetNFTTransfersResponseAdapter>;
        getWalletNFTCollections: (request: GetWalletNFTCollectionsRequest) => Promise<GetWalletNFTCollectionsResponseAdapter>;
        getWalletNFTs: (request: GetWalletNFTsRequest) => Promise<GetWalletNFTsResponseAdapter>;
        getWalletNFTTransfers: (request: GetWalletNFTTransfersRequest) => Promise<GetWalletNFTTransfersResponseAdapter>;
        reSyncMetadata: (request: ReSyncMetadataRequest) => Promise<ReSyncMetadataResponseAdapter>;
        syncNFTContract: (request: SyncNFTContractRequest) => Promise<SyncNFTContractResponseAdapter>;
        getNFTTrades: (request: GetNFTTradesOperationRequest) => Promise<PaginatedResponseV3Adapter<GetNFTTradesOperationResponse, GetNFTTradesOperationResponseJSON>>;
        getNFTCollectionStats: (request: GetNFTCollectionStatsOperationRequest) => Promise<ResponseAdapter<GetNFTCollectionStatsOperationResponse, GetNFTCollectionStatsOperationResponseJSON>>;
        getNFTTokenStats: (request: GetNFTTokenStatsOperationRequest) => Promise<ResponseAdapter<GetNFTTokenStatsOperationResponse, GetNFTTokenStatsOperationResponseJSON>>;
    };
    readonly transaction: {
        getInternalTransactions: (request: GetInternalTransactionsRequest) => Promise<GetInternalTransactionsResponseAdapter>;
        getTransaction: (request: GetTransactionRequest) => Promise<GetTransactionResponseAdapter | null>;
        getTransactionVerbose: (request: GetTransactionVerboseRequest) => Promise<GetTransactionVerboseResponseAdapter | null>;
        getWalletTransactions: (request: GetWalletTransactionsRequest) => Promise<GetWalletTransactionsResponseAdapter>;
        getWalletTransactionsVerbose: (request: GetWalletTransactionsVerboseRequest) => Promise<GetWalletTransactionsVerboseResponseAdapter>;
    };
    readonly balance: {
        getNativeBalance: (request: GetNativeBalanceRequest) => Promise<GetNativeBalanceResponseAdapter>;
        getNativeBalancesForAddresses: (request: GetNativeBalancesForAddressesRequest) => Promise<GetNativeBalancesForAddressesResponseAdapter>;
    };
    readonly defi: {
        getPairAddress: (request: GetPairAddressRequest) => Promise<GetPairAddressResponseAdapter>;
        getPairReserves: (request: GetPairReservesRequest) => Promise<GetPairReservesResponseAdapter>;
        getPairPrice: (request: GetPairPriceOperationRequest) => Promise<ResponseAdapter<GetPairPriceOperationResponse, GetPairPriceOperationResponseJSON>>;
    };
    readonly token: {
        getTokenAllowance: (request: GetTokenAllowanceRequest) => Promise<GetTokenAllowanceResponseAdapter>;
        getTokenMetadataBySymbol: (request: GetTokenMetadataBySymbolRequest) => Promise<GetTokenMetadataBySymbolResponseAdapter>;
        getTokenMetadata: (request: GetTokenMetadataRequest) => Promise<GetTokenMetadataResponseAdapter>;
        getTokenPrice: (request: GetTokenPriceRequest) => Promise<GetTokenPriceResponseAdapter>;
        getTokenTransfers: (request: GetTokenTransfersRequest) => Promise<GetTokenTransfersResponseAdapter>;
        getWalletTokenBalances: (request: GetWalletTokenBalancesRequest) => Promise<GetWalletTokenBalancesResponseAdapter>;
        getWalletTokenTransfers: (request: GetWalletTokenTransfersRequest) => Promise<GetWalletTokenTransfersResponseAdapter>;
        getMultipleTokenPrices: (request: GetMultipleTokenPricesOperationRequest, body: GetMultipleTokenPricesOperationBody) => Promise<ResponseAdapter<GetMultipleTokenPricesOperationResponse, GetMultipleTokenPricesOperationResponseJSON>>;
        getTokenStats: (request: GetTokenStatsOperationRequest) => Promise<ResponseAdapter<GetTokenStatsOperationResponse, GetTokenStatsOperationResponseJSON>>;
    };
    readonly resolve: {
        resolveAddress: (request: ResolveAddressRequest) => Promise<ResolveAddressResponseAdapter | null>;
        resolveDomain: (request: ResolveDomainRequest) => Promise<ResolveDomainResponseAdapter | null>;
        resolveENSDomain: (request: ResolveENSDomainRequest) => Promise<ResolveENSDomainResponseAdapter | null>;
        resolveAddressToDomain: (request: ResolveAddressToDomainOperationRequest) => Promise<ResponseAdapter<ResolveAddressToDomainOperationResponse, ResolveAddressToDomainOperationResponseJSON>>;
    };
    readonly utils: {
        runContractFunction: (request: RunContractFunctionRequest) => Promise<RunContractFunctionResponseAdapter>;
        web3ApiVersion: () => Promise<ResponseAdapter<Web3ApiVersionOperationResponse, Web3ApiVersionOperationResponseJSON>>;
        endpointWeights: () => Promise<ResponseAdapter<EndpointWeightsOperationResponse, EndpointWeightsOperationResponseJSON>>;
        reviewContracts: (request: ReviewContractsOperationRequest, body: ReviewContractsOperationBody) => Promise<ResponseAdapter<ReviewContractsOperationResponse, ReviewContractsOperationResponseJSON>>;
    };
    readonly ipfs: {
        uploadFolder: (request: UploadFolderRequest) => Promise<UploadFolderResponseAdapter>;
    };
    readonly wallets: {
        getWalletTokenBalancesPrice: (request: GetWalletTokenBalancesPriceOperationRequest) => Promise<PaginatedResponseV3Adapter<GetWalletTokenBalancesPriceOperationResponse, GetWalletTokenBalancesPriceOperationResponseJSON>>;
        getWalletNetWorth: (request: GetWalletNetWorthOperationRequest) => Promise<ResponseAdapter<GetWalletNetWorthOperationResponse, GetWalletNetWorthOperationResponseJSON>>;
        getWalletActiveChains: (request: GetWalletActiveChainsOperationRequest) => Promise<ResponseAdapter<GetWalletActiveChainsOperationResponse, GetWalletActiveChainsOperationResponseJSON>>;
        getWalletStats: (request: GetWalletStatsOperationRequest) => Promise<ResponseAdapter<GetWalletStatsOperationResponse, GetWalletStatsOperationResponseJSON>>;
    };
    readonly marketData: {
        getTopERC20TokensByMarketCap: () => Promise<ResponseAdapter<GetTopERC20TokensByMarketCapOperationResponse, GetTopERC20TokensByMarketCapOperationResponseJSON>>;
        getTopERC20TokensByPriceMovers: () => Promise<ResponseAdapter<GetTopERC20TokensByPriceMoversOperationResponse, GetTopERC20TokensByPriceMoversOperationResponseJSON>>;
        getTopNFTCollectionsByMarketCap: () => Promise<ResponseAdapter<GetTopNFTCollectionsByMarketCapOperationResponse, GetTopNFTCollectionsByMarketCapOperationResponseJSON>>;
        getHottestNFTCollectionsByTradingVolume: () => Promise<ResponseAdapter<GetHottestNFTCollectionsByTradingVolumeOperationResponse, GetHottestNFTCollectionsByTradingVolumeOperationResponseJSON>>;
        getTopCryptoCurrenciesByMarketCap: () => Promise<ResponseAdapter<GetTopCryptoCurrenciesByMarketCapOperationResponse, GetTopCryptoCurrenciesByMarketCapOperationResponseJSON>>;
        getTopCryptoCurrenciesByTradingVolume: () => Promise<ResponseAdapter<GetTopCryptoCurrenciesByTradingVolumeOperationResponse, GetTopCryptoCurrenciesByTradingVolumeOperationResponseJSON>>;
    };
}

declare class EvmApi extends ClientEvmApi {
    static readonly moduleName = "evmApi";
    static create(core?: Core): EvmApi;
    private constructor();
    setup(): void;
    start(): void;
}

export { EvmApi };
